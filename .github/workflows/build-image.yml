#yaml-language-server: $schema=https://json.schemastore.org/github-workflow
###############################################################################
# This workflow deploys an image to an Azure Container Registry using Actions.
# It specifies a minimal set of permissions -- access to the repo and the
# ability to write tokens. This workflow uses an Azure OIDC integration. At
# a minimum, the account must have the AcrPush role for the ACR instance.
#
# Secrets required:
#  ACR_LOGIN_SERVER - The name of the ACR Login server. The suffix (azurecr.io)
#                     can be provided but is not required.
#  AZURE_CLIENT_ID - The Application ID for the Azure AD application (OIDC)
#  AZURE_TENANT_ID - The Azure AD directory (tenant) identifier.
#  AZURE_SUBSCRIPTION_ID - The Azure subscription containing the resources.
###############################################################################

name: deploy-image
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
jobs:
  deploy-infra:
    name: 'Deploy Images'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Instead of the standard Docker login shown in most samples, 
      # it's possible to use az acr login to use the current Azure credentials.
      # This configures Docker's login at the same time.
      #- uses: Azure/docker-login@v1
      #  with:
      #    login-server: ${{ secrets.ACR_LOGIN_SERVER }}
      #    username: ${{ secrets.ACR_LOGIN_USER }}
      #    password: ${{ secrets.ACR_LOGIN_PASSWORD }}

      - run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

      - run: docker build . -t ${{ secrets.ACR_LOGIN_SERVER }}/sample:${{ github.sha }}

      - run: docker push ${{ secrets.ACR_LOGIN_SERVER }}/sample:${{ github.sha }}

